<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hiroshi Ukai&#39;s blog</title>
    <link>https://dakusui.github.io/posts/</link>
    <description>Recent content in Posts on Hiroshi Ukai&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jun 2022 03:58:57 +0900</lastBuildDate><atom:link href="https://dakusui.github.io/posts/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>About Assertions 6</title>
      <link>https://dakusui.github.io/posts/about-assertions-6/</link>
      <pubDate>Sat, 25 Jun 2022 03:58:57 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/about-assertions-6/</guid>
      <description>When testing, it is a situation that happens frequently, where you need to verify two values in a single test method. If those two values are irrelevant to each other, you should define two independent methods for them. However, in case we want to verify a certain relationship between them is satisfied or not, you can’t do so.
 Multi-values Assertion in Hamcrest public class Example { @Test public void example() { String firstName = composeFirstName(); String fullName = composeFullName(); assertThat(firstName, isNotNull()); assertThat(fullName, allOf( isNotNull(), containsString(firstName))); } }   This is an example method for Hamcrest.</description>
    </item>
    
    <item>
      <title>About Assertions 5</title>
      <link>https://dakusui.github.io/posts/about-assertions-5/</link>
      <pubDate>Thu, 16 Jun 2022 04:34:22 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/about-assertions-5/</guid>
      <description>Google Truth and AssertJ delivered a new style of assertions, where you don’t need to remember a lot of method names and class names placed in packages of Hamcrest’s jar file.
 It made possible to rely on your IDE for listing available methods, from which you can choose a desired one, instead of relying on your memory for it.
 The only thing that you need to remember is the fact that the method assertThat is what you need.</description>
    </item>
    
    <item>
      <title>About Assertions−4</title>
      <link>https://dakusui.github.io/posts/about-assertions-4/</link>
      <pubDate>Sat, 11 Jun 2022 03:10:29 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/about-assertions-4/</guid>
      <description>Hamcrest gave us a good failure report and a readable test code style. But, the latter was relying on a Java’s language feature introduced in version 5.0, &amp;#34;static import&amp;#34;.
 If we don’t use it, the code will look like the following.
 Hamcrest Without &amp;#34;static import&amp;#34; public class MultiConditions { @Test public void allOfMultiConditions() { String firstName = &amp;#34;Gaius&amp;#34;; String lastName = &amp;#34;Caesar&amp;#34;; String helloMessage = composeHelloMessageInEnglish(firstName, lastName); AllOf.assertThat(helloMessage, AllOf.</description>
    </item>
    
    <item>
      <title>About Assertions−3</title>
      <link>https://dakusui.github.io/posts/about-assertions-3/</link>
      <pubDate>Fri, 03 Jun 2022 01:31:09 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/about-assertions-3/</guid>
      <description>I mentioned a situation, where we need to repeat fix, run, fix run…​ steps. It happens when we want to make sure multiple conditions are satisfied at the same time in a single test run.
 public class MultiConditions { @Test public void multiConditions() { String firstName = &amp;#34;Gaius&amp;#34;; String lastName = &amp;#34;Caesar&amp;#34;; String helloMessage = composeHelloMessageInEnglish(firstName, lastName); assertThat(helloMessage, containsString(&amp;#34;Hello&amp;#34;)); assertThat(helloMessage, containsString(&amp;#34;Gaius&amp;#34;)); assertThat(helloMessage, containsString(&amp;#34;CAESAR&amp;#34;)); } }   Let’s suppose that we introduced bugs in the method composeHelloMessageInEnglish(String,String), where we inserted &amp;#34;Howdy&amp;#34;, instead of &amp;#34;Hello&amp;#34; and at the same time, we forgot making family name all upper cases despite its specification of the function.</description>
    </item>
    
    <item>
      <title>About Assertions 2</title>
      <link>https://dakusui.github.io/posts/about-assertions-2/</link>
      <pubDate>Tue, 31 May 2022 05:08:09 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/about-assertions-2/</guid>
      <description>Then the &amp;#34;Hamcrest&amp;#34; comes. It was the first and only library bundled with the JUnit (not anymore with JUnit5). As we saw in the previous post, the assertion capability was a part of the testing framework library until JUnit 3’s age.
 From the age of the book &amp;#34;Refactoring&amp;#34;, how to describe a failure was a concern, only checking if a condition true or not wasn’t sufficient from the beginning. &amp;#34;How&amp;#34; it was not satisfied matters.</description>
    </item>
    
    <item>
      <title>About Assertions 1</title>
      <link>https://dakusui.github.io/posts/about-assertions-1/</link>
      <pubDate>Tue, 31 May 2022 04:39:15 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/about-assertions-1/</guid>
      <description>When I write a test with JUnit, etc., I always feel annoyed at not being able to make it clean or doing so is really difficult. Let me state here, my principles in coding.
  &amp;#34;Repetitive things are machine’s, not human’s&amp;#34;
  &amp;#34;Tests are also codes. They should be as clean as the product&amp;#34;
   Perhaps, I need to add some other new principles to them later as my thought develops through posting entries to this blog, but anyway, I am going to call the set of my ideas that I am presenting here, &amp;#34;Test Design as Code&amp;#34;.</description>
    </item>
    
    <item>
      <title>Second Post</title>
      <link>https://dakusui.github.io/posts/second-post/</link>
      <pubDate>Tue, 17 May 2022 19:34:01 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/second-post/</guid>
      <description>Then trying ditaa, which wouldn’t be working with hugo.
 +-----+ |hello| +-----+   </description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://dakusui.github.io/posts/first-post/</link>
      <pubDate>Tue, 17 May 2022 18:42:24 +0900</pubDate>
      
      <guid>https://dakusui.github.io/posts/first-post/</guid>
      <description>This is my first post on this my new blog. Let me try the asciidoctor’s source feature.
 public class Hello { public static void main(String... args) { System.out.println(&amp;#34;Hello, world&amp;#34;); } }   </description>
    </item>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  </channel>
</rss>
